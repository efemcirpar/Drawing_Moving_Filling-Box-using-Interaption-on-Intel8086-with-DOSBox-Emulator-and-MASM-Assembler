;MACRO FOR PRINTING WITH NEWLINES
PRINT MACRO msg
    LEA DX, msg
    MOV AH, 09H
    INT 21H
    MOV AH, 02H
    MOV DL, 0DH
    INT 21H
    MOV DL, 0AH
    INT 21H
ENDM

.model small
.data

SENTENCE1 DB 'Filling   : 1 (true), 0 (false)','$'
SENTENCE2 DB 'Movement  : Left, Right, Up, Down', '$'
SENTENCE3 DB 'Exit      : ESC','$'

;PROPERTIES OF THE RECTANGLE
REC_WIDTH EQU 70
REC_HEIGHT EQU 40
COLOR EQU 13

;STARTING OFFSET
X_STARTING_OFFSET EQU 50
Y_STARTING_OFFSET EQU 50

;FILL STATES
FALSE_STATE EQU 0
TRUE_STATE EQU 1

.code 
Start PROC
.startup

;INITIALIZING NECESSARY VARIABLES 
MOV SI, X_STARTING_OFFSET ;STARTING FROM X=50
MOV DI, Y_STARTING_OFFSET ;STARTIN FROM Y=50
MOV BH, 0

BEGINNING:

    ;GAME STATE 0 (BOX IS NOT FULL)
    FALSE_FILL:
    CMP BH, 0
    JNE END_FALSE_FILL

    ;SETTING VIDEO MODE AS VGA 320x200
    MOV AH, 0
    MOV AL, 13h
    INT 10h

    ;HORIZONTAL LINE
    MOV CX, REC_WIDTH
    MOV DX, 0
    ADD CX, SI
    ADD DX, DI
    MOV AL, COLOR
    LOOP1:
        MOV AH, 0ch
        INT 10h
        DEC CX
        CMP CX, SI
        JAE LOOP1


    ;LOWER HORIZONTAL LINE
    MOV CX, REC_WIDTH
    MOV DX, REC_HEIGHT
    ADD CX, SI
    ADD DX, DI
    MOV AL, COLOR
    LOOP2:
        MOV AH, 0ch
        INT 10h
        DEC CX
        CMP CX, SI
        JA LOOP2

    ;LEFT VERTICAL LINE
    MOV CX, 0
    MOV DX, REC_HEIGHT 
    ADD CX, SI
    ADD DX, DI
    MOV AL, COLOR
    LOOP3:
        MOV AH, 0ch
        INT 10h
        DEC DX
        CMP DX, DI
    JA LOOP3

    ;RIGHT VERTICAL LINE
    MOV CX, REC_WIDTH 
    MOV DX, REC_HEIGHT 
    ADD CX, SI
    ADD DX, DI
    MOV AL, COLOR
    LOOP4:
        MOV AH, 0ch
        INT 10h
        DEC DX
        CMP DX, DI
        JA LOOP4

    END_FALSE_FILL:
  
    ;GAME STATE 1 (BOX IS FULL)
    TRUE_FILL:
    CMP BH, TRUE_STATE
    JNE END_TRUE_FILL
        
        MOV AH, 0
        MOV AL, 13h
        INT 10h

        MOV CX, 0
        MOV BL, 0
        ADD CX, SI

        FILLING:
        MOV DX, REC_HEIGHT 
        ADD DX, DI
        MOV AL, COLOR
        FILL_LOOP:
            MOV AH, 0ch
            INT 10h
            DEC DX
            CMP DX, DI
        JAE FILL_LOOP
        INC CX
        INC BL
        CMP BL, REC_WIDTH
        JBE FILLING

    END_TRUE_FILL:


;PRINTING THE STRINGS
PRINTER:

    MOV AX, @data
    MOV DS, AX
    PRINT SENTENCE1
    PRINT SENTENCE2
    PRINT SENTENCE3

;HANDLING KEY STROKES
MAIN_LOOP:
    
    MOV AH, 10H
    INT 16H

    CMP AL, 49 ; CHECKING WHETHER '1' IS PRESSED
    JE TRUE_FILLING

    CMP AL, 48 ; CHECKING WHETHER '0' IS PRESSED
    JE FALSE_FILLING

    CMP AH, 4bh  ; CHECKING WHETHER 'LEFT ARROW' IS PRESSED
    JE SHIFT_LEFT

    CMP AH, 4dh  ; CHECKING WHETHER 'RIGHT ARROW' IS PRESSED
    JE SHIFT_RIGHT

    CMP AH, 48h ; CHECKING WHETHER 'UP ARROW' IS PRESSED
    JE SHIFT_UP

    CMP AH, 50h  ; CHECKING WHETHER 'DOWN ARROW' IS PRESSED
    JE SHIFT_DOWN
    
    CMP AL, 27 ; CHECKING WHETHER 'ESC' IS PRESSED
    JE TERMINATE

JMP MAIN_LOOP

;CHANGING GAME STATE TO 1 (FILLED)
TRUE_FILLING:
    MOV BH, TRUE_STATE
JMP BEGINNING

;CHANGING GAME STATE TO 0 (EMPTY)
FALSE_FILLING:
    MOV BH, FALSE_STATE
JMP BEGINNING

;STAYING IN SCREEN
SHIFT_LEFT:
    CMP SI, 5
    JG SI_DEC
JMP MAIN_LOOP

SHIFT_RIGHT:
    CMP SI, 245
    JL SI_INC
JMP MAIN_LOOP

SHIFT_UP:
    CMP DI, 50
    JG DI_DEC
JMP MAIN_LOOP

SHIFT_DOWN:
    CMP DI, 155
    JL DI_INC
JMP MAIN_LOOP

;SHIFTING THE TOP-LEFTMOST CORNER TO CONTROL THE MOVEMENT OF BOX
SI_INC:
    INC SI
JMP BEGINNING

SI_DEC:
    DEC SI
JMP BEGINNING

DI_INC:
    INC DI
JMP BEGINNING

DI_DEC:
    DEC DI
JMP BEGINNING

;TERMINATING WITH CLEARING SCREEN
TERMINATE:
    MOV AH, 0
    MOV AL, 13h
    INT 10h
    MOV AH, 4CH
    INT 21H
    
.EXIT
Start ENDP
END Start